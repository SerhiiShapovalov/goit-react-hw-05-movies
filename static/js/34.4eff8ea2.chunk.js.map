{"version":3,"file":"static/js/34.4eff8ea2.chunk.js","mappings":"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","sources":["components/MoviesList.jsx","pages/Movies.jsx","services/ThemoviedbApi.js"],"sourcesContent":["import { NavLink, useLocation } from 'react-router-dom';\n\nexport default function MoviesList({ searchResult }) {\n  const location = useLocation();\n  return (\n    <ul>\n      {searchResult.map(({ id, title, name, poster_path }) => (\n        <li key={id}>\n          <NavLink key={id} to={`/movies/${id}`} state={{ from: location }}>\n            <img\n              src={\n                poster_path\n                  ? 'https://image.tmdb.org/t/p/w300' + poster_path\n                  : 'https://via.placeholder.com/300x450'\n              }\n              width={300}\n              height={450}\n              alt={title || name}\n            />\n            <h2>{title || name}</h2>\n          </NavLink>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchMovies } from 'services/ThemoviedbApi';\n\nimport MoviesList from '../components/MoviesList';\n\nexport default function Movies() {\n  const [searchResult, setSearchResult] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams({});\n\n  const query = searchParams.get('query') ?? '';\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setSearchParams({ query: evt.currentTarget.elements.search.value });\n  };\n\n  useEffect(() => {\n    if (!query) return;\n    getSearchMovies(query)\n      .then(resp => {\n        setSearchResult([...resp.results]);\n      })\n      .catch(error => console.log(error));\n  }, [query]);\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Search movie\"\n          autoComplete=\"off\"\n          name=\"search\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {searchResult.length > 0 && <MoviesList searchResult={searchResult} />}\n    </div>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '3b6934ed0c52e5b57602e1d4aa10a490';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/all/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getSearchMovies = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response.data; // Возвращаем весь объект response.data\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  // Проверяем, что response.data содержит свойство \"results\" и это является массивом\n  if (Array.isArray(response.data.results)) {\n    return response.data.results;\n  } else {\n    // Если \"results\" отсутствует или не является массивом, возвращаем пустой массив\n    return [];\n  }\n};\n"],"names":["MoviesList","_ref","searchResult","location","useLocation","_jsx","children","map","_ref2","id","title","name","poster_path","_jsxs","NavLink","to","concat","state","from","src","width","height","alt","Movies","_searchParams$get","_useState","useState","_useState2","_slicedToArray","setSearchResult","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","query","get","useEffect","getSearchMovies","then","resp","_toConsumableArray","results","catch","error","console","log","onSubmit","evt","preventDefault","currentTarget","elements","search","value","type","placeholder","autoComplete","length","API_KEY","BASE_URL","getTrendingMovies","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","axios","sent","abrupt","data","stop","apply","arguments","_callee2","_context2","_x","getMovieDetails","_ref3","_callee3","movieId","_context3","_x2","getMovieCredits","_ref4","_callee4","_context4","cast","_x3","getMovieReviews","_ref5","_callee5","_context5","Array","isArray","_x4"],"sourceRoot":""}